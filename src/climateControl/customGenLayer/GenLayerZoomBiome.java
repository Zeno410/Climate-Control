
package climateControl.customGenLayer;

import climateControl.genLayerPack.GenLayerPack;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerZoomBiome extends GenLayerPack
{
    private static final String __OBFID = "CL_00000572";

    public GenLayerZoomBiome(long par1, GenLayer par3GenLayer)
    {
        super(par1);
        super.parent = par3GenLayer;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int parentX0 = par1 >> 1;
        int parentZ0 = par2 >> 1;
        int parentWidth = (par3 >> 1) + 2;
        int parentHeight = (par4 >> 1) + 2;
        int[] aint = this.parent.getInts(parentX0, parentZ0, parentWidth, parentHeight);
        int workingWidth = parentWidth - 1 << 1;
        int workingHeight = parentHeight - 1 << 1;
        int[] aint1 = IntCache.getIntCache(workingWidth * workingHeight);
        poison(aint1,workingWidth * workingHeight);
        int l2;

        for (int parentZ = 0; parentZ < parentHeight - 1; ++parentZ)
        {
            l2 = (parentZ << 1) * workingWidth;
            int i3 = 0;
            int j3 = aint[i3 + 0 + (parentZ + 0) * parentWidth];

            for (int k3 = aint[i3 + 0 + (parentZ + 1) * parentWidth]; i3 < parentWidth - 1; ++i3)
            {
                this.initChunkSeed((long)(i3 + parentX0 << 1), (long)(parentZ + parentZ0 << 1));
                int l3 = aint[i3 + 1 + (parentZ + 0) * parentWidth];
                int i4 = aint[i3 + 1 + (parentZ + 1) * parentWidth];
                aint1[l2] = j3;
                aint1[l2++ + workingWidth] = this.selectRandom(new int[] {j3, k3});
                aint1[l2] = this.selectRandom(new int[] {j3, l3});
                aint1[l2++ + workingWidth] = this.selectModeOrRandom(j3, l3, k3, i4);
                j3 = l3;
                k3 = i4;
            }
        }

        int[] aint2 = IntCache.getIntCache(par3 * par4);


        for (l2 = 0; l2 < par4; ++l2)
        {
            System.arraycopy(aint1, (l2 + (par2 & 1)) * workingWidth + (par1 & 1), aint2, l2 * par3, par3);
        }

        taste(aint2,par3*par4);
        return aint2;
    }

    /**
     * Magnify a layer. Parms are seed adjustment, layer, number of times to magnify
     */
    public static GenLayer magnify(long par0, GenLayer par2GenLayer, int par3)
    {
        Object object = par2GenLayer;

        for (int k = 0; k < par3; ++k)
        {
            object = new GenLayerZoomBiome(par0 + (long)k, (GenLayer)object);
        }

        return (GenLayer)object;
    }
}